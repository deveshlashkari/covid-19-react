{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","Constants/Constants.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid-updated.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","xs","md","item","component","Card","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","fetchData","country","a","changableUrl","Constants","BASE_URL","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountriesList","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","Styles","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","src","Covid","image","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c84c02d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3ZPge\",\"card\":\"Cards_card__3ZaeH\",\"infected\":\"Cards_infected__1vRRo\",\"recovered\":\"Cards_recovered__1tlgx\",\"deaths\":\"Cards_deaths__1gUuY\"};","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nimport styles from \"./Cards.module.css\";\r\n\r\nconst Cards = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          xs={12}\r\n          md={3}\r\n          item\r\n          component={Card}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={confirmed.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of active cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          xs={12}\r\n          md={3}\r\n          item\r\n          component={Card}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={recovered.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          xs={12}\r\n          md={3}\r\n          item\r\n          component={Card}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={deaths.value}\r\n                duration={2.5}\r\n                seperator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {new Date(lastUpdate).toDateString()}\r\n            </Typography>\r\n            <Typography variant=\"body2\">\r\n              Number of deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nimport Constants from \"../Constants/Constants\";\r\n\r\n//using async await to handle asynchronous calls\r\nexport const fetchData = async (country) => {\r\n  let changableUrl = Constants.BASE_URL;\r\n\r\n  if (country) {\r\n    changableUrl = `${Constants.BASE_URL}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    //destructuring of data\r\n    const {\r\n      data: { confirmed, recovered, deaths, lastUpdate },\r\n    } = await axios.get(changableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${Constants.BASE_URL}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesList = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${Constants.BASE_URL}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nimport Styles from \"./Chart.module.css\";\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  const lineChart =\r\n    dailyData.length !== 0 ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#fbc02d\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: \"#ff5252\",\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n  const barChart = confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\"#fbc02d\", \"#00e676\", \"#ff5252\"],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: {\r\n          display: false,\r\n        },\r\n        title: { display: true, text: `Current status of ${country}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  return (\r\n    <div className={Styles.container}>{country ? barChart : lineChart}</div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl } from \"@material-ui/core\";\r\n\r\nimport Styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountriesList } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setFetchedCountries(await fetchCountriesList());\r\n    };\r\n    fetchCountries();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <FormControl className={Styles.formControl}>\r\n      <NativeSelect\r\n        defaultValue=\"\"\r\n        onChange={(e) => {\r\n          handleCountryChange(e.target.value);\r\n        }}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {fetchedCountries.map((country, i) => (\r\n          <option key={i} value={country}>\r\n            {country}\r\n          </option>\r\n        ))}\r\n      </NativeSelect>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","/* eslint-disable jsx-a11y/alt-text */\r\nimport React from \"react\";\r\n\r\nimport styles from \"./App.module.css\";\r\n\r\nimport Cards from \"./components/Cards/Cards\";\r\nimport Chart from \"./components/Chart/Chart\";\r\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";\r\nimport Covid from \"./images/covid-updated.png\";\r\n\r\nimport { fetchData } from \"./api\";\r\n\r\nclass App extends React.Component {\r\n  //No constructor cause it autoamtically creates in backend\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n    this.setState({ data: fetchedData, country: country });\r\n  };\r\n\r\n  render() {\r\n    //destructure the state to pass it to components\r\n    const { data, country } = this.state;\r\n    return (\r\n      <div className={styles.container}>\r\n        <img src={Covid} className={styles.image} alt=\"COVID-19\" />\r\n        <Cards data={data} />\r\n        <CountryPicker handleCountryChange={this.handleCountryChange} />\r\n        <Chart data={data} country={country} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App></App>, document.getElementById(\"root\"));\r\n","exports.BASE_URL = \"https://covid19.mathdro.id/api\";\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__Zgt5r\",\"image\":\"App_image__2V9M_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1Lbl1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1j7La\"};","module.exports = __webpack_public_path__ + \"static/media/covid-updated.162806c4.png\";"],"sourceRoot":""}